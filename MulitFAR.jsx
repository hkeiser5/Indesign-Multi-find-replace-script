/* JavaScript Find & Replace with Grep Indd script for catalog product copywritten by Heather C Keiser, copyright 2019.------------------------------------------------------------------Instructions on how to useCreate a csv UTF-8 file from an excell sheet. The excell sheet must have headers.One column must have the header "find" and another column must havethe header "replace". Open the csv file when prompted by the script,then every value in the find coolumn is found and replaced by the corosponding value in the replace column.Note this will not work if any of your fields have a quote followed by commawithin the fields.example: "hello", she saidexample2: 5",both of the above will fail and cause the wrong values to be found/replaced.----------------------------------------------------------------*///work with all open docs get linked csv file called "propogate.csv"var myCurrentDoc = app.activeDocument; //selects current active documentvar allDocs = app.documents;var myframe = false;//can use later if user decides to change by storyif(app.selection[0] === undefined){	//do nothing, no frame selected - check if frame is a text frame} else if ((app.selection[0].getElements()[0] instanceof TextFrame)||(app.selection[0].getElements()[0] instanceof TextBox)){	myframe = app.selection[0];}var dialogchoice = false;var myPropogate  = File.openDialog('Select a CSV File','comma-separated-values(*.csv):*.csv;');while (dialogchoice === false){	if (!myPropogate){//dialog box was closed without file choice		dialogchoice = true;	} else if (myPropogate.name.match(/\.csv$/i)){//this is a csv		dialogchoice = true;		myPropogate.open('r',undefined, undefined);//read the file		var myContents =  myPropogate.read(); //get info in file		myPropogate.close();//close the file		myPropogate = myContents;//reassign mycontents to mypropogate	} else {		myPropogate.close();		alert('Please select a CSV file (ends in .csv)');		myPropogate  = File.openDialog('Please select a CSV File (ends in .csv)','comma-separatevalues(*.csv):*.csv;');	}}//create 2 arrays based off two columns in the propogate csv called "find" and "replace"var myFind = [];var myReplace = [];if (myPropogate != null){		//create an array of every row in the csv	var rows = myPropogate.split('\n');	//im getting an empty line at the end of this from a PC.    for (var empty = 0; empty<rows.length; empty++){		if (rows[empty] === ''){			rows.splice(empty, 1);		}	}	//now turn every element in the rows into an array (break it by columns)	for (var l = 0; l< rows.length; l++){		//add a comma to front and end of each line		var comma = ',';		rows[l] = comma.concat(rows[l], comma);           		var comIndices = [];		for (var n = 0; n < rows[l].length; n++) {			if (rows[l][n] === ',') {				comIndices.push(n);			}		}				var skipIndex = -1;//starts neg so that first , always is a starter		var newrow = [];		//create array based off comma indicies		for (var r =0; r < comIndices.length-1; r++){			var curIndex = comIndices[r];//comma we are checking			var checknext = 1;			var nextIndex = comIndices[r+checknext];			var lastIndex = comIndices[comIndices.length-1];			//need to reset skip index if on the last 2nd to last index in string & to set rows[i]                			if (r === comIndices.length-2){//this is last iteration and has not been represented in the while loop below				if (skipIndex === lastIndex){					//do nothing already pushed				}else{					newrow.push(rows[l].slice(curIndex + 1,nextIndex));				}								skipIndex = -1;//reset skip for next loop set				rows[l] = newrow;				newrow = [];//reset newrow for next set			} else if (rows[l][curIndex+1] === '"'){//this section is a quote group				//while loop to find the end of the quote group				var quoteend = false;				while (quoteend === false){//need a check if nextIndex is last index					if (nextIndex === lastIndex){//this is last group													newrow.push(rows[l].slice(curIndex + 1,nextIndex));						skipIndex = lastIndex;						quoteend = true;					} else if (rows[l][nextIndex-1] === '"'){//this is end of quotes													newrow.push(rows[l].slice(curIndex + 1,nextIndex));						skipIndex = nextIndex-1;						quoteend = true;						} else {						checknext += 1;						nextIndex = comIndices[r+checknext];					}				}//end while loop                   			} else if (curIndex > skipIndex){//this section has no comma, and is not part of another comma push to next indici				newrow.push(rows[l].slice(curIndex + 1,nextIndex));			} //else do nothing and go to next loop		}//end making the array based off commas                    //now clean up all the extra quotes that the csv data created		for (var j=0; j<rows[l].length; j++){           			//delete single quotes at front and end, as those were added in creation of csv			rows[l][j] = rows[l][j].replace(/^"(?!")/,'');			//neg look behind doesn't work-need to check another way			if (rows[l][j][rows[l][j].length-2] !== '"'){				rows[l][j] = rows[l][j].replace(/"($|\n)/,'');			}			//change triple and double quotes to single quotes			rows[l][j] = rows[l][j].replace(/"""/g,'"');			rows[l][j] = rows[l][j].replace(/""/g,'"');		}//end clean up quotes					//find the index of find & replace		var findIndex;		var replaceIndex;		for (var i=0; i< rows[0].length; i++){			if (rows[0][i] == 'find'){				findIndex = i;			} else if (rows[0][i] == 'replace'){				replaceIndex = i;			}		}//end find indexes for find/replace    		//push values from every row by those indexes into appropriate arrays skip index0, as that is just headers		if (l > 0){            myFind.push(rows[l][findIndex]);            myReplace.push(rows[l][replaceIndex]);        }///end push to find/replace	}//end breakdown csv into arrays	//need to escape characters in the find data so that grep search finds correctly	var slash = String('\\');	//for loop i=0, i<= array length, i++, find match from find, and replace with replace data utilizing grep replace.	for (var f=0; f< myFind.length; f++){			//escape special characters in find to prepare for grep   		myFind[f] = myFind[f].replace(/\\/g,slash + '\\');		myFind[f] = myFind[f].replace(/\*/g,slash + '*');		myFind[f] = myFind[f].replace(/\./g,slash + '.');		myFind[f] = myFind[f].replace(/\+/g,slash + '+');		myFind[f] = myFind[f].replace(/\?/g,slash + '?');		myFind[f] = myFind[f].replace(/\^/g,slash + '^');		myFind[f] = myFind[f].replace(/\$/g,slash + '$');		myFind[f] = myFind[f].replace(/\(/g,slash + '(');		myFind[f] = myFind[f].replace(/\)/g,slash + ')');		myFind[f] = myFind[f].replace(/\</g,slash + '<');		myFind[f] = myFind[f].replace(/\>/g,slash + '>');		myFind[f] = myFind[f].replace(/\{/g,slash + '{');		myFind[f] = myFind[f].replace(/\[/g,slash + '[');		myFind[f] = myFind[f].replace(/\|/g,slash + '|');	}				//insert a dialog box to make decisions on how to do the find/change						// DIALOG		// ======		var mydialog = new Window("dialog"); 		mydialog.text = "Dialog"; 		mydialog.orientation = "column"; 		mydialog.alignChildren = ["center","top"]; 		mydialog.spacing = 10; 		mydialog.margins = 16; 		// SEARCHDOC		// =========		var searchDoc = mydialog.add("group", undefined, {name: "searchDoc"}); 		searchDoc.orientation = "row"; 		searchDoc.alignChildren = ["left","center"]; 		searchDoc.spacing = 10; 		searchDoc.margins = 0; 		var statictext1 = searchDoc.add("statictext", undefined, undefined, {name: "statictext1"}); 		statictext1.text = "Search:"; 		var searchfield_array = [];		if (myframe === false){			searchfield_array = ["Document","All Documents"];		}else{			searchfield_array = ["Document","All Documents","Story"];		}		var searchfield = searchDoc.add("dropdownlist", undefined, undefined, {name: "searchfield", items: searchfield_array}); 		searchfield.selection = 0; 		var divider1 = mydialog.add("panel", undefined, undefined, {name: "divider1"}); 		divider1.alignment = "fill"; 		// INCLUDESTUFF		// ============		var includeStuff = mydialog.add("group", undefined, {name: "includeStuff"}); 		includeStuff.orientation = "column"; 		includeStuff.alignChildren = ["left","center"]; 		includeStuff.spacing = 10; 		includeStuff.margins = 0; 		var includeSpecial = includeStuff.add("statictext", undefined, undefined, {name: "includeSpecial"}); 		includeSpecial.text = "Include changes in the following:"; 		var hiddenStuff = includeStuff.add("checkbox", undefined, undefined, {name: "hiddenStuff"}); 		hiddenStuff.text = "Hidden Layers/Hidden Objects"; 		var masterPages = includeStuff.add("checkbox", undefined, undefined, {name: "masterPages"}); 		masterPages.text = "Master Pages"; 		var footNotes = includeStuff.add("checkbox", undefined, undefined, {name: "footNotes"}); 		footNotes.text = "Foot Notes"; 		var divider2 = mydialog.add("panel", undefined, undefined, {name: "divider2"}); 		divider2.alignment = "fill"; 		// INCLUDESTYLES		// =============		var includeStyles = mydialog.add("group", undefined, {name: "includeStyles"}); 		includeStyles.orientation = "column"; 		includeStyles.alignChildren = ["left","center"]; 		includeStyles.spacing = 10; 		includeStyles.margins = 0; 		var statictext2 = includeStyles.add("statictext", undefined, undefined, {name: "statictext2"}); 		statictext2.text = "Include Styles:"; 		// INCLUDECHARSTYLE		// ================		var includeCharStyle = includeStyles.add("group", undefined, {name: "includeCharStyle"}); 		includeCharStyle.orientation = "row"; 		includeCharStyle.alignChildren = ["left","center"]; 		includeCharStyle.spacing = 10; 		includeCharStyle.margins = 0; 		var statictext3 = includeCharStyle.add("statictext", undefined, undefined, {name: "statictext3"}); 		statictext3.text = "Character Styles"; 		var allCharStyles = myCurrentDoc.allCharacterStyles;		var myCurrentChars = [];		for (var cs=0; cs<allCharStyles.length; cs++){			myCurrentChars.push(allCharStyles[cs].name);		}		myCurrentChars.unshift("[Any Style]");		var charStyles = includeCharStyle.add("dropdownlist", undefined, undefined, {name: "charStyles", items: myCurrentChars}); 		charStyles.selection = 0; 		// PARASTYLES		// ==========		var paraStyles = includeStyles.add("group", undefined, {name: "paraStyles"}); 		paraStyles.orientation = "row"; 		paraStyles.alignChildren = ["left","center"]; 		paraStyles.spacing = 10; 		paraStyles.margins = 0; 		var statictext4 = paraStyles.add("statictext", undefined, undefined, {name: "statictext4"}); 		statictext4.text = "Paragraph Style"; 				var parStylesDoc = myCurrentDoc.allParagraphStyles;		var myCurrentPars = [];		for (var pn=0; pn<parStylesDoc.length; pn++){			myCurrentPars.push(parStylesDoc[pn].name);		}		myCurrentPars.unshift("[Any Style]");		var parStyles = paraStyles.add("dropdownlist", undefined, undefined, {name: "parstyles", items: myCurrentPars}); 		parStyles.selection = 0; 		var divider3 = mydialog.add("panel", undefined, undefined, {name: "divider3"}); 		divider3.alignment = "fill"; 		// COMPLETE		// ========		var mycomplete = mydialog.add("group", undefined, {name: "complete"}); 		mycomplete.orientation = "row"; 		mycomplete.alignChildren = ["right","center"]; 		mycomplete.spacing = 10; 		mycomplete.margins = 0; 		var confirmBtn = mycomplete.add("button", undefined, {name: "ok"}); 		confirmBtn.text = "OK";		confirmBtn.preferredSize.width = 78;		var cancelBtn = mycomplete.add("button", undefined, {name: "cancel"}); 		cancelBtn.text = "Cancel";				//show the dialog box		var myResult = mydialog.show();		if (myResult ===1){//clicked ok!			for (var findex=0; findex< myFind.length; findex++){			//Clear the find/change text preferences.			app.findGrepPreferences = NothingEnum.nothing;			app.changeGrepPreferences = NothingEnum.nothing;			//Set the GREP find options 			app.findChangeGrepOptions.includeFootnotes = footNotes.value;			app.findChangeGrepOptions.includeHiddenLayers = hiddenStuff.value;			app.findChangeGrepOptions.includeMasterPages = masterPages.value;						//Set char styles and par style GREP preferences			if (charStyles.selection.text === "[None]"){				app.findGrepPreferences.appliedCharacterStyle = myCurrentDoc.characterStyles[0];			} else if (charStyles.selection.text !== "[Any Style]"){				app.findGrepPreferences.appliedCharacterStyle = charStyles.selection.text;			}											if (parStyles.selection.text === "[Basic Paragraph]"){				app.findGrepPreferences.appliedParagraphStyle = myCurrentDoc.paragraphStyles[1];			} else if ((parStyles.selection.text !== "[Any Style]") && (parStyles.selection.text !== "[No Paragraph Style]")){				app.findGrepPreferences.appliedParagraphStyle = parStyles.selection.text;			}									//since this is find and replace both of the following should always be false			app.findChangeGrepOptions.includeLockedLayersForFind = false;			app.findChangeGrepOptions.includeLockedStoriesForFind = false;			//Look for the pattern and change to			app.findGrepPreferences.findWhat = myFind[findex];			app.changeGrepPreferences.changeTo = myReplace[findex];						//determine what to change			if (searchfield.selection.text === "Story"){				myframe.parentStory.changeGrep();			} else if (searchfield.selection.text === "Document"){				myCurrentDoc.changeGrep();	   			} else if (searchfield.selection.text === "All Documents"){				allDocs.changeGrep();			}										//Clear the find/change text preferences.			app.findGrepPreferences = NothingEnum.nothing;			app.changeGrepPreferences = NothingEnum.nothing;			}						} else if (myResult ===2){//clicked cancel-do nothing						}								}// JavaScript Document